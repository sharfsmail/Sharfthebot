import os
import logging
import requests
from telegram import Update, InputMediaPhoto
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# Включаем логирование
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Твой Telegram Token и Replicate API Token из Environment variables
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
REPLICATE_API_TOKEN = os.getenv('REPLICATE_API_TOKEN')

def start(update: Update, context: CallbackContext):
    update.message.reply_text("Привет! Отправь мне фото, и я превращу его в карикатуру!")

def process_photo(update: Update, context: CallbackContext):
    photo_file = update.message.photo[-1].get_file()
    photo_path = 'input_photo.jpg'
    photo_file.download(photo_path)

    update.message.reply_text("Обрабатываю твоё фото...")

    with open(photo_path, "rb") as f:
        files = {"file": f}
        headers = {
            "Authorization": f"Token {REPLICATE_API_TOKEN}"
        }
        # Пример запроса к модели на replicate.com (замени на актуальный endpoint и параметры)
        response = requests.post(
            "https://api.replicate.com/v1/predictions",
            headers=headers,
            files=files,
            json={
                "version": "caricature-model-version-id",
                "input": {"image": photo_path}
            }
        )
    if response.status_code == 201:
        prediction = response.json()
        output_url = prediction['output'][0]
        update.message.reply_photo(photo=output_url)
    else:
        update.message.reply_text("Произошла ошибка при обработке.")

def main():
    updater = Updater(TELEGRAM_TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.photo, process_photo))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()